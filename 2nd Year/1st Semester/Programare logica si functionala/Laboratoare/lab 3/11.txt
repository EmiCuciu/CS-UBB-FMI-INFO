11. Sa se genereze toate subsirurile de lungime 2n+1, formate doar din 0, -1 sau 1, 
astfel incat a1 = 0, ..., a2n+1= 0 si | ai+1 – ai| = 1 sau 2, pentru orice 1 <= i <= 2n.

REGULI:    1)subsiruri de lungime 2n+1

           2)a1 = 0, a2n+1 = 0

           3)|ai+1 - ai| = 1 sau 2,
            1 <= i <= 2n

           4)ai = -1, 0, 1

%%%
member1(E:element, L:lista)
(i,i,o :T sau F) model de flux

member1(E,l1 l2 .. ln) = (False,              n=0)
                        (True,                E = l1 )
                        (member1(E,l2 .. ln), altfel )


%%%
invers_acc(L:lista, Acc:Lista auxiliara ce ne ajuta la inversarea listei, Rez)
(i,i,o) model de flux

invers_acc([l1 l2 .. ln],[a1 a2 .. am]) =   ([a1 a2 .. am], n=0)
                                            (invers_acc([l2 .. ln],[l1 (+) [a1 a2 .. am]], altfel))

inversare_lista(L:lista, Rez:lista rezultat)
(i,o) model de flux

inversare_lista([l1 l2 .. ln]) = (R=invers_acc([l1 l2 .. ln],[]))


%%%
genereaza(E:element, Len:integer, Acc:lista, R:lista)
E = pentru a calcula următorul element valid
Len = Numărul de elemente care mai trebuie generate. La început, acesta este 2n+1.
Acc = Lista acumulatoare în care se stochează elementele generate, în ordinea inversă (ultimul element adăugat apare primul în listă).
R = lista rezultat de lungimea 2n+1

caz de baza => Len = 1:
    genereaza(E, 1, Acc, Rez) = (R = [_|0], ultimul element in lista rezultat este 0)

caz recursiv => Len > 1:
    genereaza(E, L, Acc, Rez) = (ne oprim cand ajungem in Len = 0)
                                (dam valori lui newE=E+-1 sau newE=E+-2 pentru a verifica regula |newE - E|~{1,2})
                                (verificam daca newE apartine (-1,0,1))
                                (NewLen = Len-1)
                                genereaza(newE, NewLen, [newE|Acc], R)


%%%
subsiruri(N:integer, R:lista)
(i,o) model de flux

subsiruri(N) =  (M = 2*N+1)
                (R = genereaza(0, M, [0], R))


Exemple:
subsiruri(1,R).  
R = [0, 1, 0] ;
R = [0, -1, 0] ;
false.

subsiruri(2,R). 
R = [0, 1, 0, 1, 0] ;
R = [0, 1, 0, -1, 0] ;
R = [0, 1, -1, 1, 0] ;
R = [0, -1, 0, 1, 0] ;
R = [0, -1, 0, -1, 0] ;
R = [0, -1, 1, -1, 0] ;
false.


subsiruri(4,R).  
R = [0, 1, 0, 1, 0, 1, 0, 1, 0] ;
R = [0, 1, 0, 1, 0, 1, 0, -1, 0] ;
R = [0, 1, 0, 1, 0, 1, -1, 1, 0] ;
R = [0, 1, 0, 1, 0, -1, 0, 1, 0] ;
R = [0, 1, 0, 1, 0, -1, 0, -1, 0] ;
R = [0, 1, 0, 1, 0, -1, 1, -1, 0] ;
R = [0, 1, 0, 1, -1, 0, 1, -1, 0] ;
R = [0, 1, 0, 1, -1, 0, -1, 1, 0] ;
R = [0, 1, 0, 1, -1, 1, 0, 1, 0] ;
R = [0, 1, 0, 1, -1, 1, 0, -1, 0] ;
R = [0, 1, 0, 1, -1, 1, -1, 1, 0] ;
R = [0, 1, 0, -1, 0, 1, 0, 1, 0] ;
R = [0, 1, 0, -1, 0, 1, 0, -1, 0] ;
R = [0, 1, 0, -1, 0, 1, -1, 1, 0] ;
R = [0, 1, 0, -1, 0, -1, 0, 1, 0] ;
R = [0, 1, 0, -1, 0, -1, 0, -1, 0] ;
R = [0, 1, 0, -1, 0, -1, 1, -1, 0] ;
R = [0, 1, 0, -1, 1, 0, 1, -1, 0] ;
R = [0, 1, 0, -1, 1, 0, -1, 1, 0] ;
R = [0, 1, 0, -1, 1, -1, 0, 1, 0] ;
R = [0, 1, 0, -1, 1, -1, 0, -1, 0] ;
R = [0, 1, 0, -1, 1, -1, 1, -1, 0] ;
R = [0, 1, -1, 0, 1, 0, 1, -1, 0] ;
R = [0, 1, -1, 0, 1, 0, -1, 1, 0] ;
R = [0, 1, -1, 0, 1, -1, 0, 1, 0] ;
R = [0, 1, -1, 0, 1, -1, 0, -1, 0] ;
R = [0, 1, -1, 0, 1, -1, 1, -1, 0] ;
R = [0, 1, -1, 0, -1, 0, 1, -1, 0] ;
R = [0, 1, -1, 0, -1, 0, -1, 1, 0] ;
R = [0, 1, -1, 0, -1, 1, 0, 1, 0] ;
R = [0, 1, -1, 0, -1, 1, 0, -1, 0] ;
R = [0, 1, -1, 0, -1, 1, -1, 1, 0] ;
R = [0, 1, -1, 1, 0, 1, 0, 1, 0] ;
R = [0, 1, -1, 1, 0, 1, 0, -1, 0] ;
R = [0, 1, -1, 1, 0, 1, -1, 1, 0] ;
R = [0, 1, -1, 1, 0, -1, 0, 1, 0] ;
R = [0, 1, -1, 1, 0, -1, 0, -1, 0] ;
R = [0, 1, -1, 1, 0, -1, 1, -1, 0] ;
R = [0, 1, -1, 1, -1, 0, 1, -1, 0] ;
R = [0, 1, -1, 1, -1, 0, -1, 1, 0] ;
R = [0, 1, -1, 1, -1, 1, 0, 1, 0] ;
R = [0, 1, -1, 1, -1, 1, 0, -1, 0] ;
R = [0, 1, -1, 1, -1, 1, -1, 1, 0] ;
R = [0, -1, 0, 1, 0, 1, 0, 1, 0] ;
R = [0, -1, 0, 1, 0, 1, 0, -1, 0] ;
R = [0, -1, 0, 1, 0, 1, -1, 1, 0] ;
R = [0, -1, 0, 1, 0, -1, 0, 1, 0] ;
R = [0, -1, 0, 1, 0, -1, 0, -1, 0] ;
R = [0, -1, 0, 1, 0, -1, 1, -1, 0] ;
R = [0, -1, 0, 1, -1, 0, 1, -1, 0] ;
R = [0, -1, 0, 1, -1, 0, -1, 1, 0] ;
R = [0, -1, 0, 1, -1, 1, 0, 1, 0] ;
R = [0, -1, 0, 1, -1, 1, 0, -1, 0] ;
R = [0, -1, 0, 1, -1, 1, -1, 1, 0] ;
R = [0, -1, 0, -1, 0, 1, 0, 1, 0] ;
R = [0, -1, 0, -1, 0, 1, 0, -1, 0] ;
R = [0, -1, 0, -1, 0, 1, -1, 1, 0] ;
R = [0, -1, 0, -1, 0, -1, 0, 1, 0] ;
R = [0, -1, 0, -1, 0, -1, 0, -1, 0] ;
R = [0, -1, 0, -1, 0, -1, 1, -1, 0] ;
R = [0, -1, 0, -1, 1, 0, 1, -1, 0] ;
R = [0, -1, 0, -1, 1, 0, -1, 1, 0] ;
R = [0, -1, 0, -1, 1, -1, 0, 1, 0] ;
R = [0, -1, 0, -1, 1, -1, 0, -1, 0] ;
R = [0, -1, 0, -1, 1, -1, 1, -1, 0] ;
R = [0, -1, 1, 0, 1, 0, 1, -1, 0] ;
R = [0, -1, 1, 0, 1, 0, -1, 1, 0] ;
R = [0, -1, 1, 0, 1, -1, 0, 1, 0] ;
R = [0, -1, 1, 0, 1, -1, 0, -1, 0] ;
R = [0, -1, 1, 0, 1, -1, 1, -1, 0] ;
R = [0, -1, 1, 0, -1, 0, 1, -1, 0] ;
R = [0, -1, 1, 0, -1, 0, -1, 1, 0] ;
R = [0, -1, 1, 0, -1, 1, 0, 1, 0] ;
R = [0, -1, 1, 0, -1, 1, 0, -1, 0] ;
R = [0, -1, 1, 0, -1, 1, -1, 1, 0] ;
R = [0, -1, 1, -1, 0, 1, 0, 1, 0] ;
R = [0, -1, 1, -1, 0, 1, 0, -1, 0] ;
R = [0, -1, 1, -1, 0, 1, -1, 1, 0] ;
R = [0, -1, 1, -1, 0, -1, 0, 1, 0] ;
R = [0, -1, 1, -1, 0, -1, 0, -1, 0] ;
R = [0, -1, 1, -1, 0, -1, 1, -1, 0] ;
R = [0, -1, 1, -1, 1, 0, 1, -1, 0] ;
R = [0, -1, 1, -1, 1, 0, -1, 1, 0] ;
R = [0, -1, 1, -1, 1, -1, 0, 1, 0] ;
R = [0, -1, 1, -1, 1, -1, 0, -1, 0] ;
R = [0, -1, 1, -1, 1, -1, 1, -1, 0] ;
false.