1.
 a. Sa se scrie un predicat care intoarce diferenta a doua multimi.
 b. Sa se scrie un predicat care adauga intr-o lista dupa fiecare element par valoarea 1.

a) 
diferenta(A: prima lista, B: a doua lista, Rez: lista rezultat)
(i, i, o) model de flux

Model matematic:

member1(E,l1 l2 .. ln) = (fals, daca lista e goala )
                        (adevarat, daca E = l1 )
                        (member(E,l2 .. ln), altfel )

diferenta([], B) = []                                   (caz de bază: dacă lista A e goală, rezultatul este o listă goală)
diferenta([l1 l2 .. ln], B) = diferenta(l2 l3 .. ln, B), dacă l1 ∈ B           (dacă elementul l1 este în B, trecem la restul listei)
diferenta([l1 l2 .. ln], B) = [l1 (+) diferenta(l2 l3 .. ln, B)], dacă l1 ∉ B     (dacă elementul l1 nu este în B, îl adăugăm în rezultat)

Exemple:

diferenta([1,2,3,4],[1,2],Rez). => Rez=[3,4]

diferenta([10,20,30,70],[10,70],Rez). => Rez=[20,30]


b)
adauga_1(L: lista de intrare, Rez: lista rezultat)
(i, o) model de flux

Model matematic:

adauga_1([],[]) = []                         (caz de baza: daca lista este goala, rezultatul este o lista goala)
adauga_1([l1 l2 .. ln]) = [l1, 1 (+) adauga_1(l2 l3 .. ln)]       (daca elementul l1 este par, adaugam 1 dupa)
adauga_1([l1 l2 .. ln]) = [l1 (+) adauga_1(l2 l3 .. ln)]          (daca l1 este impar, trecem la restul listei)

Exemple:

adauga_1([1,2,3,4],Rez). => Rez=[1,2,1,3,4,1]

adauga_1([100,101,111,112],Rez). => Rez=[100,1,101,111,112,1]