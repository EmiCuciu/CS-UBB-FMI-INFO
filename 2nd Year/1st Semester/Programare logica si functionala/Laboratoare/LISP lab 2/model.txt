Pentru urmatoarele probleme se cer functii Lisp programate in mod recursiv
(eventual folosind functii MAP):
Un arbore binar se memoreaza in urmatoarele doua moduri
(nod nr-subarbori lista-subarbore-1 lista-subarbore-2 ...) (1)
(nod (lista-subarbore-1) (lista-subarbore-2)) (2)
De exemplu arborele
  A
 / \
 B C
  / \
  D  E
se poate reprezenta astfel in cele doua moduri:
(A 2 B 0 C 2 D 0 E 0) (1)
(A (B) (C (D) (E))) (2)


1. Se da un arbore de tipul (1). Sa se afiseze calea de la radacina pana la un
 nod x dat.



find-path(l1 l2 .. ln,x) =  {NIL    , n=0}
                            {x    , l1 = x}
                            {find-path-in-children([l3 .. ln],l2,x,l1)}


find-path-in-children(c1 c2 .. cm, nr_children, x, parent)= 
    {NIL, nr_children=0}
    {NIL, m=0} 
    {parent (+) (find-path(c1 .. cm, x)), find-path(c1 .. cm, x) nu e vida}
    {find-path-in-children(get-next-child(children), nr_children-1,x , parent), altfel}


get-next-child(l1 l2 .. ln) =   {NIL, n=0}
                                {NIL, l2=0}
                                {skip-subtree(l3 .. ln, l2), altfel}


skip-subtree(l1 l2 .. ln, count) =  {[l1 l2 .. ln], count = 0}
                                    {NIL, n=0}
                                    {skip-subtree(l3 l4 .. ln,count+l2-1), altfel}