     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit, scanf, printf, fopen, fread, fclose, fprintf
     6                                  
     7                                  import exit msvcrt.dll
     8                                  import scanf msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  
    15                                  segment data use32 class=data
    16 00000000 00000000                    n dd 0
    17 00000004 00000000                    m dd 0
    18 00000008 00000000                    nr dd 0
    19 0000000C <res 00000028>              text resd 10
    20                                  
    21 00000034 43617465206E756D65-         format_m db "Cate numere citesc: %d",0
    21 0000003D 726520636974657363-
    21 00000046 3A20256400         
    22 0000004B 256400                      format_nr db "%d",0
    23 0000004E 4D696E696D756C2064-         format_n db "Minimul de cifre zecimale: %d",0
    23 00000057 65206369667265207A-
    23 00000060 6563696D616C653A20-
    23 00000069 256400             
    24                                      
    25 0000006C 00                          len db 0
    26                                      
    27 0000006D 6F75747075742E7478-         nume_fisier db "output.txt",0
    27 00000076 7400               
    28 00000078 7700                        mod_acces db "w",0
    29                                      
    30 0000007A FFFFFFFF                    descriptor_fisier dd -1
    31                                      
    32                                      
    33                                  segment code use32 class=code
    34                                      start:
    35                                          ; ...
    36                                          
    37 00000000 68[04000000]                    push dword m
    38 00000005 68[4B000000]                    push dword format_nr
    39 0000000A FF15[00000000]                  call [scanf]
    40 00000010 83C408                          add esp,4*2
    41                                          
    42 00000013 FF35[04000000]                  push dword [m]
    43 00000019 68[34000000]                    push dword format_m
    44 0000001E FF15[00000000]                  call [printf]
    45 00000024 83C408                          add esp,4*2
    46                                          
    47 00000027 68[00000000]                    push dword n
    48 0000002C 68[4B000000]                    push dword format_nr
    49 00000031 FF15[00000000]                  call [scanf]
    50 00000037 83C408                          add esp,4*2
    51                                          
    52 0000003A FF35[00000000]                  push dword [n]
    53 00000040 68[4E000000]                    push dword format_n
    54 00000045 FF15[00000000]                  call [printf]
    55 0000004B 83C408                          add esp,4*2
    56                                          
    57                                          
    58 0000004E 8B0D[04000000]                  mov ecx,[m]
    59 00000054 BE00000000                      mov esi,0
    60                                          repeta:
    61 00000059 51                                  push ecx
    62 0000005A 68[08000000]                        push dword nr
    63 0000005F 68[4B000000]                        push dword format_nr
    64 00000064 FF15[00000000]                      call [scanf]
    65 0000006A 83C408                              add esp,4*2
    66                                              
    67 0000006D 8B15[08000000]                      mov edx,[nr]
    68                                              
    69 00000073 8996[0C000000]                      mov [text+esi],edx
    70 00000079 83C604                              add esi,4
    71 0000007C 59                                  pop ecx
    72 0000007D E2DA                                loop repeta
    73                                              
    74 0000007F 68[78000000]                    push dword mod_acces
    75 00000084 68[6D000000]                    push dword nume_fisier
    76 00000089 FF15[00000000]                  call [fopen]
    77 0000008F 83C408                          add esp,4*2
    78                                          
    79 00000092 A3[7A000000]                    mov [descriptor_fisier],eax
    80                                          
    81 00000097 83F800                          cmp eax,0
    82 0000009A 7440                            je final
    83                                          
    84                                          
    85 0000009C BE00000000                      mov esi,0
    86                                          verifica:
    87 000000A1 8A86[0C000000]                      mov al,[text+esi]
    88 000000A7 B400                                mov ah,0
    89 000000A9 B202                                mov dl,2
    90 000000AB F6F2                                div dl
    91                                              
    92 000000AD 80FC00                              cmp ah,0
    93 000000B0 7F18                                jg next
    94                                              
    95 000000B2 6698                                cbw
    96 000000B4 98                                  cwde
    97 000000B5 FF35[7A000000]                      push dword[descriptor_fisier]
    98 000000BB 50                                  push dword eax
    99 000000BC FF15[00000000]                      call [fprintf]
   100 000000C2 83C408                              add esp,4*2
   101                                              
   102 000000C5 83F900                              cmp ecx,0
   103 000000C8 7403                                je close
   104                                              
   105                                              next:
   106 000000CA 46                                  inc esi
   107 000000CB EBD4                                jmp verifica
   108                                              
   109                                          close:
   110 000000CD FF35[7A000000]                      push dword [descriptor_fisier]
   111 000000D3 FF15[00000000]                      call [fclose]
   112 000000D9 83C404                              add esp,4
   113                                          
   114                                          final:
   115                                          ; exit(0)
   116 000000DC 6A00                            push dword 0      ; push the parameter for exit onto the stack
   117 000000DE FF15[00000000]                  call [exit]
