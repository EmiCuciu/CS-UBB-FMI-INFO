     1                                  bits 32
     2                                  global start        
     3                                  
     4                                  extern exit               
     5                                  import exit msvcrt.dll    
     6                                  
     7                                  ; Se dau 2 siruri de octeti A si B. Sa se construiasca sirul R care sa contina doar elementele impare si pozitive din cele 2 siruri.
     8                                  ; Exemplu:
     9                                  ; A: 2, 1, 3, -3
    10                                  ; B: 4, 5, -5, 7
    11                                  ; R: 1, 3, 5, 7
    12                                  
    13                                  section data use32 class=data
    14 00000000 020103FD                    A db 2,1,3,-3
    15                                      lenA equ $-A
    16 00000004 0405FB07                    B db 4,5,-5,7
    17                                      lenB equ $-B
    18                                      lenRez equ lenA+lenB
    19 00000008 00<rept>                    R times lenRez db 0
    20                                  
    21                                  section code use32 class=code
    22                                  start:
    23                                      ; Initializăm registrele și variabilele
    24 00000000 BE00000000                  mov esi, 0
    25 00000005 BF00000000                  mov edi, 0
    26                                  
    27                                      ; Procesăm șirul A
    28 0000000A B904000000                  mov ecx, lenA
    29                                      repetaA:
    30 0000000F 8A86[00000000]                  mov al, [A + esi]
    31 00000015 A801                            test al, 1
    32 00000017 740B                            jz nextA  ; Saltă la nextA dacă al nu este impar
    33 00000019 3C00                            cmp al, 0
    34 0000001B 7E07                            jle nextA  ; Saltă la nextA dacă al nu este pozitiv
    35 0000001D 8887[08000000]                  mov [R + edi], al
    36 00000023 47                              inc edi
    37                                      nextA:
    38 00000024 46                              inc esi
    39 00000025 E2E8                            loop repetaA
    40                                  
    41                                      ; Procesăm șirul B
    42 00000027 B904000000                  mov ecx, lenB
    43 0000002C BE00000000                  mov esi, 0
    44                                      repetaB:
    45 00000031 8A86[04000000]                  mov al, [B + esi]
    46 00000037 A801                            test al, 1
    47 00000039 740B                            jz nextB  ; Saltă la nextB dacă al nu este impar
    48 0000003B 3C00                            cmp al, 0
    49 0000003D 7E07                            jle nextB  ; Saltă la nextB dacă al nu este pozitiv
    50 0000003F 8887[08000000]                  mov [R + edi], al
    51 00000045 47                              inc edi
    52                                      nextB:
    53 00000046 46                              inc esi
    54 00000047 E2E8                            loop repetaB
    55                                  
    56                                      ; exit(0)
    57 00000049 6A00                        push    dword 0      
    58 0000004B FF15[00000000]              call    [exit]
