     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 00000000                    a dd 0
    16 00000004 53637269657469206E-         message db "Scrieti numarul a=",0
    16 0000000D 756D6172756C20613D-
    16 00000016 00                 
    17 00000017 256400                      format_scanf db "%d",0
    18 0000001A 613D3C25643E202862-         format_raspuns db "a=<%d> (baza 10), a=<%x> (baza 16)",0
    18 00000023 617A61203130292C20-
    18 0000002C 613D3C25783E202862-
    18 00000035 617A612031362900   
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 68[04000000]                    push message
    25 00000005 FF15[00000000]                  call [printf]
    26 0000000B 83C404                          add esp,4
    27                                          
    28 0000000E 68[00000000]                    push a
    29 00000013 68[17000000]                    push format_scanf
    30 00000018 FF15[00000000]                  call [scanf]
    31 0000001E 83C408                          add esp,4*2
    32                                          
    33 00000021 A1[00000000]                    mov eax,[a]
    34                                          
    35 00000026 50                              push eax
    36 00000027 50                              push eax
    37 00000028 68[1A000000]                    push format_raspuns
    38 0000002D FF15[00000000]                  call [printf]
    39 00000033 83C40C                          add esp,4*3
    40                                          
    41                                      
    42                                          ; exit(0)
    43 00000036 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    44 00000038 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
