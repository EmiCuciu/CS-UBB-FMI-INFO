     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,scanf,fopen,fprintf,fread,fclose               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  import printf msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  import fopen msvcrt.dll
    15                                  import fclose msvcrt.dll
    16                                  import fread msvcrt.dll
    17                                  
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20                                      ; ...
    21 00000000 65782031372E747874-         nume_fisier db "ex 17.txt",0
    21 00000009 00                 
    22 0000000A 7700                        mod_acces db "w",0
    23 0000000C FFFFFFFF                    descriptor_fisier dd -1
    24 00000010 446174692036206E75-         format_print db "Dati 6 numere, ultimul trebuie sa fie 0: ",0
    24 00000019 6D6572652C20756C74-
    24 00000022 696D756C2074726562-
    24 0000002B 756965207361206669-
    24 00000034 6520303A2000       
    25 0000003A 256400                      format_scanf db "%d",0
    26                                      len equ 6
    27 0000003D 00<rept>                    text times len db 0
    28 00000043 00000000                    a dd 0
    29                                      
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ; ...
    34 00000000 68[10000000]                    push format_print
    35 00000005 FF15[00000000]                  call [printf]
    36 0000000B 83C404                          add esp,4
    37                                          
    38 0000000E 68[0A000000]                    push mod_acces
    39 00000013 68[00000000]                    push nume_fisier
    40 00000018 FF15[00000000]                  call [fopen]
    41 0000001E 83C408                          add esp,4*2
    42                                          
    43 00000021 A3[0C000000]                    mov [descriptor_fisier],eax
    44                                          
    45 00000026 83F800                          cmp eax,0
    46 00000029 746F                            je final
    47                                          
    48 0000002B BE00000000                      mov esi,0
    49                                          repeta:
    50 00000030 68[43000000]                        push a
    51 00000035 68[3A000000]                        push format_scanf
    52 0000003A FF15[00000000]                      call [scanf]
    53 00000040 83C408                              add esp,4*2
    54                                              
    55 00000043 A1[43000000]                        mov eax,[a]
    56                                              
    57 00000048 83F800                              cmp eax,0
    58 0000004B 740D                                je div_7
    59                                              
    60 0000004D 8986[3D000000]                      mov [text+esi],eax
    61 00000053 83C602                              add esi,2
    62 00000056 EBD8                                jmp repeta
    63                                          
    64                                          
    65 00000058 89F1                            mov ecx,esi
    66                                          div_7:
    67 0000005A BE00000000                          mov esi,0
    68                                              lop:
    69 0000005F 668B86[3D000000]                        mov ax,[text+esi]
    70 00000066 6689C2                                  mov dx,ax
    71 00000069 83C602                                  add esi,2
    72 0000006C B307                                    mov bl,7
    73 0000006E F6F3                                    div bl
    74                                                  
    75 00000070 80FC00                                  cmp ah,0
    76 00000073 7402                                    je afisare
    77                                                  
    78 00000075 E2E8                                    loop lop
    79                                          
    80                                          afisare:
    81 00000077 6689D0                              mov ax,dx
    82 0000007A 98                                  cwde
    83 0000007B 50                                  push eax
    84 0000007C FF35[0C000000]                      push dword [descriptor_fisier]
    85 00000082 FF15[00000000]                      call [fprintf]
    86 00000088 83C408                              add esp,4*2
    87                                          
    88 0000008B FF35[0C000000]                  push dword [descriptor_fisier]
    89 00000091 FF15[00000000]                  call [fclose]
    90 00000097 83C404                          add esp,4
    91                                          
    92                                          final:
    93                                          ; exit(0)
    94 0000009A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    95 0000009C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
