     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  section data use32 class=data
    13 00000000 7856AB12CDAB561244-         sir dd 12AB5678h, 1256ABCDh, 12344344h 
    13 00000009 433412             
    14                                      len equ ($-sir)/4
    15 0000000C 0000                        inf times len/2 dw 0
    16 0000000E 0000                        sup times len/2 dw 0
    17 00000010 00000000<rept>              rez times len dd 0
    18                                  
    19                                  ; our code starts here
    20                                  section code use32 class=code
    21                                  start:
    22 00000000 BE[00000000]                mov esi, sir
    23 00000005 FC                          cld
    24 00000006 B903000000                  mov ecx, len
    25 0000000B BA00000000                  mov edx, 0
    26                                  repeta:
    27 00000010 AD                          lodsd
    28 00000011 6689C3                      mov bx, ax
    29 00000014 250000FFFF                  and eax, 0FFFF0000h
    30 00000019 C1E810                      shr eax, 16
    31 0000001C 66899A[0C000000]            mov [inf + edx], bx
    32 00000023 668982[0E000000]            mov [sup + edx], ax
    33 0000002A 83C202                      add edx, 2
    34 0000002D E2E1                        loop repeta
    35                                  
    36                                  sortare:
    37 0000002F BE[0E000000]                mov esi, sup       ; ESI va pointa la începutul listei cu cuvintele superioare
    38 00000034 B901000000                  mov ecx, len/2     ; Numărul de elemente de sortat (jumătate din lungimea totală)
    39                                  
    40                                  outer_loop:
    41 00000039 BA00000000                  mov edx, 0       ; Indicator pentru a verifica dacă s-au făcut schimbări în această iterație
    42 0000003E BF00000000                  mov edi, 0       ; EDI va pointa la începutul listei
    43                                  
    44                                      inner_loop:
    45 00000043 8B043E                          mov eax, [esi + edi]    ; Cuvântul curent
    46 00000046 8B5C3E04                        mov ebx, [esi + edi + 4]  ; Cuvântul următor
    47                                  
    48 0000004A 39D8                            cmp eax, ebx
    49 0000004C 760C                            jbe no_swap
    50                                  
    51                                          ; Schimbare
    52 0000004E 891C3E                          mov [esi + edi], ebx
    53 00000051 89443E04                        mov [esi + edi + 4], eax
    54                                  
    55                                          ; Setăm indicatorul de schimbare
    56 00000055 BA01000000                      mov edx, 1
    57                                  
    58                                      no_swap:
    59 0000005A 83C704                          add edi, 4
    60 0000005D E2E4                            loop inner_loop
    61                                  
    62                                      ; Dacă nu s-au făcut schimbări, lista este sortată
    63 0000005F 85D2                        test edx, edx
    64 00000061 75D6                        jnz outer_loop  ; Bucla continuă doar dacă există schimbări
    65 00000063 49                          dec ecx          ; Actualizează numărul de elemente rămase de sortat
    66                                  
    67 00000064 75D3                        jnz outer_loop  ; Bucla continuă doar dacă mai sunt elemente de sortat
    68                                  
    69                                  sorted:
    70                                      ; Acum cuvintele superioare ale dublucuvintelor sunt sortate în memorie
    71                                      ; Le putem combina înapoi în șirul rezultat
    72                                  
    73 00000066 BE[0C000000]                mov esi, inf       ; ESI va pointa la începutul listei cu cuvintele inferioare
    74 0000006B BF[0E000000]                mov edi, sup       ; EDI va pointa la începutul listei cu cuvintele superioare sortate
    75 00000070 B901000000                  mov ecx, len/2     ; Numărul de elemente
    76                                  
    77                                  combina:
    78 00000075 8B06                        mov eax, [esi]        ; Cuvântul inferior curent
    79 00000077 8B1F                        mov ebx, [edi]        ; Cuvântul superior sortat curent
    80                                  
    81                                      ; Combina cuvântul inferior și superior
    82 00000079 C1E310                      shl ebx, 16
    83 0000007C 09D8                        or eax, ebx
    84                                  
    85                                      ; Stochează cuvântul combinat în șirul rezultat
    86 0000007E 8986[10000000]              mov [rez + esi], eax
    87                                  
    88 00000084 83C604                      add esi, 4
    89 00000087 83C704                      add edi, 4
    90 0000008A E2E9                        loop combina
    91                                  
    92                                  ; acum șirul sortat este în memoria "rez"
    93                                  
    94                                  ; exit(0)
    95 0000008C B800000000                  mov eax, 0      ; push the parameter for exit onto the stack
    96 00000091 FF15[00000000]              call    [exit]       ; call exit to terminate the program
