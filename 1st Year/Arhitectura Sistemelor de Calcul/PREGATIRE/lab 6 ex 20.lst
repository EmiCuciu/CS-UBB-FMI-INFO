     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  section data use32 class=data
    13                                      ; ...
    14 00000000 636F6A6F6320636170-         text db 'cojoc capac civic abcba acba', 0  ; Exemplu de text
    14 00000009 616320636976696320-
    14 00000012 616263626120616362-
    14 0000001B 6100               
    15                                  
    16                                  ; our code starts here
    17                                  section code use32 class=code
    18                                      start:
    19                                      ; Parcurgem textul pana la terminatorul nul
    20 00000000 BE[00000000]                mov esi, text
    21 00000005 B900000000                  mov ecx, 0
    22                                  
    23                                      next_word:
    24                                          ; Ignoram spatii si alte caractere non-alfabetice
    25                                          ignore_non_alphabetic:
    26 0000000A 803E00                              cmp byte [esi], 0
    27 0000000D 7441                                je end_program
    28 0000000F 803E20                              cmp byte [esi], ' '
    29 00000012 740C                                je skip_char
    30 00000014 803E61                              cmp byte [esi], 'a'
    31 00000017 7C07                                jl skip_char
    32 00000019 803E7A                              cmp byte [esi], 'z'
    33 0000001C 7F02                                jg skip_char
    34 0000001E EB03                                jmp process_char
    35                                          skip_char:
    36 00000020 46                                  inc esi
    37 00000021 EBE7                                jmp ignore_non_alphabetic
    38                                          
    39                                          process_char:
    40                                              ; Initializam variabilele pentru verificarea palindromului
    41 00000023 89F7                                mov edi, esi          ; edi va pointa la sfarsitul cuvantului
    42                                              find_word_end:
    43 00000025 803F00                                  cmp byte [edi], 0
    44 00000028 7412                                    je check_palindrome
    45 0000002A 803F20                                  cmp byte [edi], ' '
    46 0000002D 740D                                    je check_palindrome
    47 0000002F 803F61                                  cmp byte [edi], 'a'
    48 00000032 7C08                                    jl check_palindrome
    49 00000034 803F7A                                  cmp byte [edi], 'z'
    50 00000037 7F03                                    jg check_palindrome
    51 00000039 47                                      inc edi
    52 0000003A EBE9                                    jmp find_word_end
    53                                  
    54                                              check_palindrome:
    55                                                  ; Verificam daca cuvantul este palindrom
    56 0000003C 39FE                                    cmp esi, edi
    57 0000003E 7DCA                                    jge next_word  ; trecem la urmatorul cuvant daca am ajuns la sfarsitul cuvantului
    58 00000040 8A06                                    mov al, [esi]       ; incarcam prima valoare in al
    59 00000042 8A1F                                    mov bl, [edi]       ; incarcam a doua valoare in bl
    60 00000044 38D8                                    cmp al, bl
    61 00000046 7504                                    jne not_palindrome
    62 00000048 46                                      inc esi
    63 00000049 4F                                      dec edi
    64 0000004A EBF0                                    jmp check_palindrome
    65                                              not_palindrome:
    66                                                  ; Daca nu este palindrom, continuam la urmatorul cuvant
    67 0000004C 89FE                                    mov esi, edi
    68 0000004E EBBA                                    jmp next_word
    69                                  
    70                                      end_program:
    71                                          ; exit(0)
    72 00000050 6A00                            push dword 0
    73 00000052 E8(00000000)                    call exit
